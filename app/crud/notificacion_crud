from typing import Optional, Sequence
from datetime import date
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.models.notificacion import NotificacionModel
from app.schemas.notificacion_schema import NotificacionCrear, NotificacionActualizar

async def crear_notificacion(session: AsyncSession, not_in: NotificacionCrear) -> NotificacionModel:
    payload = not_in.model_dump()
    payload.setdefault("fecha_envio", date.today())
    not_db = NotificacionModel(**payload)
    session.add(not_db)
    await session.commit()
    await session.refresh(not_db)
    return not_db

async def buscar_notificacion_por_id(session: AsyncSession, id_notificacion: int) -> Optional[NotificacionModel]:
    stmt = select(NotificacionModel).where(NotificacionModel.id_notificacion == id_notificacion)
    res = await session.execute(stmt)
    return res.scalar_one_or_none()

async def listar_notificaciones_por_usuario(session: AsyncSession, id_usuario: int, limit: int = 50, offset: int = 0) -> Sequence[NotificacionModel]:
    stmt = select(NotificacionModel).where(NotificacionModel.id_usuario == id_usuario).order_by(NotificacionModel.fecha_envio.desc()).offset(offset).limit(limit)
    res = await session.execute(stmt)
    return res.scalars().unique().all()

async def actualizar_notificacion(session: AsyncSession, id_notificacion: int, update_in: NotificacionActualizar) -> Optional[NotificacionModel]:
    n = await buscar_notificacion_por_id(session, id_notificacion)
    if not n:
        return None
    for k, v in update_in.model_dump(exclude_unset=True).items():
        if hasattr(n, k):
            setattr(n, k, v)
    session.add(n)
    await session.commit()
    await session.refresh(n)
    return n

async def eliminar_notificacion(session: AsyncSession, id_notificacion: int) -> bool:
    n = await buscar_notificacion_por_id(session, id_notificacion)
    if not n:
        return False
    await session.delete(n)
    await session.commit()
    return True